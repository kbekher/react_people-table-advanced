{"version":3,"sources":["components/HomePage.tsx","api.ts","components/Loader/Loader.tsx","types/SortField.ts","types/Filter.ts","components/PersonLink.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleTable.tsx","components/PeopleFilters.tsx","components/PeoplePage.tsx","utils/filterPeople.ts","components/NotFoundPage.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["HomePage","className","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","SortField","Filter","PersonLink","person","slug","useParams","useSearchParams","searchParams","classNames","to","pathname","search","toString","sex","name","born","died","mother","motherName","father","fatherName","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","PeopleTable","people","isError","sortField","get","ALL","sortOrder","handleSortParams","field","sort","order","NAME","SEX","BORN","DIED","map","find","p","ALL_CENTURIES","PeopleFilters","setSearchParams","query","QUERY","centuries","getAll","CENTURIES","toggleCentury","century","includes","filter","c","type","onChange","event","setSearchWith","target","placeholder","length","PeoplePage","useState","setPeople","setIsError","loading","setLoading","fetchPeopleFromServer","peopleFromServer","useEffect","visiblePeople","useMemo","filteredPeople","normalizeQuery","toLowerCase","byName","byMotherName","byFatherName","Math","ceil","p1","p2","localeCompare","filterPeople","NotFoundPage","getLinkClass","isActive","Navbar","role","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.6cd6ee2b.chunk.js","sourcesContent":["export const HomePage = () => (<h1 className=\"title\">Home Page</h1>);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export enum SortField {\n  ALL = '',\n  SEX = 'sex',\n  NAME = 'name',\n  BORN = 'born',\n  DIED = 'died',\n}\n","export enum Filter {\n  SEX = 'sex',\n  QUERY = 'query',\n  CENTURIES = 'centuries',\n}\n","import React from 'react';\nimport { Link, useParams, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { slug } = useParams();\n  const [searchParams] = useSearchParams();\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': slug === person.slug,\n      })}\n    >\n      <td>\n        <Link\n          to={{\n            pathname: `/people/${person.slug}`,\n            search: searchParams.toString(),\n          }}\n          className={classNames({\n            'has-text-danger': person.sex === 'f',\n          })}\n        >\n          {person.name}\n        </Link>\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {person.mother ? (\n          <Link to={`/people/${person.mother.slug}`} className=\"has-text-danger\">\n            {person.motherName}\n          </Link>\n        ) : (\n          person.motherName || '-'\n        )}\n      </td>\n      <td>\n        {person.father ? (\n          <Link to={`/people/${person.father.slug}`}>\n            {person.fatherName}\n          </Link>\n        ) : (\n          person.fatherName || '-'\n        )}\n      </td>\n    </tr>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person, SortField } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[];\n  isError: boolean;\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, isError }) => {\n  const [searchParams] = useSearchParams();\n  const sortField = searchParams.get('sort') || SortField.ALL;\n  const sortOrder = searchParams.get('order') || '';\n\n  const handleSortParams = (field: SortField) => {\n    if (sortField === field && !sortOrder) {\n      return {\n        sort: field,\n        order: 'desc',\n      };\n    }\n\n    if (sortField === field && sortOrder) {\n      return {\n        sort: null,\n        order: null,\n      };\n    }\n\n    return {\n      sort: field,\n      order: null,\n    };\n  };\n\n  return (\n    <>\n      {!isError ? (\n        <table\n          data-cy=\"peopleTable\"\n          className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n        >\n          <thead>\n            <tr>\n              <th>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  Name\n                  <SearchLink params={handleSortParams(SortField.NAME)}>\n                    <span className=\"icon\">\n                      <i className={classNames('fas', {\n                        'fa-sort': sortField !== SortField.NAME,\n                        'fa-sort-up': sortField === SortField.NAME\n                                      && !sortOrder,\n                        'fa-sort-down': sortField === SortField.NAME\n                                      && sortOrder,\n                      })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n\n              <th>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  Sex\n                  <SearchLink params={handleSortParams(SortField.SEX)}>\n                    <span className=\"icon\">\n                      <i className={classNames('fas', {\n                        'fa-sort': sortField !== SortField.SEX,\n                        'fa-sort-up': sortField === SortField.SEX\n                                      && !sortOrder,\n                        'fa-sort-down': sortField === SortField.SEX\n                                      && sortOrder,\n                      })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n\n              <th>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  Born\n                  <SearchLink params={handleSortParams(SortField.BORN)}>\n                    <span className=\"icon\">\n                      <i\n                        className={classNames('fas', {\n                          'fa-sort': sortField !== SortField.BORN,\n                          'fa-sort-up': sortField === SortField.BORN\n                                        && !sortOrder,\n                          'fa-sort-down': sortField === SortField.BORN\n                                        && sortOrder,\n                        })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n\n              <th>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  Died\n                  <SearchLink params={handleSortParams(SortField.DIED)}>\n                    <span className=\"icon\">\n                      <i\n                        className={classNames('fas', {\n                          'fa-sort': sortField !== SortField.DIED,\n                          'fa-sort-up': sortField === SortField.DIED\n                                        && !sortOrder,\n                          'fa-sort-down': sortField === SortField.DIED\n                                        && sortOrder,\n                        })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n\n              <th>Mother</th>\n              <th>Father</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {people.map(person => (\n              <PersonLink\n                key={person.slug}\n                person={{\n                  ...person,\n                  mother: people.find(p => p.name === person.motherName),\n                  father: people.find(p => p.name === person.fatherName),\n                }}\n              />\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p>There are no people matching the current search criteria</p>\n      )}\n    </>\n  );\n};\n","import classNames from 'classnames';\n\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchParams, getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\nimport { Filter } from '../types';\n\nconst ALL_CENTURIES = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters: React.FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sex = searchParams.get(Filter.SEX) || '';\n  const query = searchParams.get(Filter.QUERY) || '';\n  const centuries = searchParams.getAll(Filter.CENTURIES) || [];\n\n  function setSearchWith(params: SearchParams) {\n    const newParams = getSearchWith(searchParams, params);\n\n    setSearchParams(newParams);\n  }\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSearchWith({ query: event.target.value || null });\n  }\n\n  function toggleCentury(century: string) {\n    return centuries.includes(century)\n      ? centuries.filter(c => c !== century)\n      : [...centuries, century];\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames({\n            'is-active': !sex,\n          })}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={classNames({\n            'is-active': sex === 'm',\n          })}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={classNames({\n            'is-active': sex === 'f',\n          })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            value={query}\n            onChange={handleQueryChange}\n            placeholder=\"Search\"\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n\n            {ALL_CENTURIES.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                params={{ centuries: toggleCentury(century) }}\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              params={{ centuries: null }}\n              className={classNames('button is-success', {\n                'is-outlined': centuries.length > 0,\n              })}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          params={{ sex: null, query: null, centuries: null }}\n          className={classNames('button is-link is-fullwidth', {\n            'is-outlined': sex || query || centuries,\n          })}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getPeople } from '../api';\nimport { Loader } from './Loader';\nimport { Filter, Person, SortField } from '../types';\nimport { PeopleTable } from './PeopleTable';\nimport { PeopleFilters } from './PeopleFilters';\nimport { filterPeople } from '../utils/filterPeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const [searchParams] = useSearchParams();\n  const sex = searchParams.get(Filter.SEX) || '';\n  const query = searchParams.get(Filter.QUERY) || '';\n  const centuries = searchParams.getAll(Filter.CENTURIES) || [];\n  const sortField = searchParams.get('sort') as SortField || SortField.ALL;\n  const sortOrder = searchParams.get('order') || '';\n\n  const fetchPeopleFromServer = async () => {\n    setIsError(false);\n    setLoading(true);\n\n    try {\n      const peopleFromServer = await getPeople();\n\n      setPeople(peopleFromServer);\n    } catch {\n      setIsError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPeopleFromServer();\n  }, []);\n\n  const visiblePeople = useMemo(() => filterPeople(people, {\n    sex,\n    query,\n    centuries,\n    sortField,\n    sortOrder,\n  }), [people, query, centuries, sortField, sortOrder]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {people.length !== 0 && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {loading && <Loader />}\n\n              {!people.length && !loading && !isError && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {visiblePeople.length !== 0 && (\n                <PeopleTable\n                  people={visiblePeople}\n                  isError={isError}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person, SortField } from '../types';\n\ntype FilterSortParams = {\n  sex: string;\n  query: string;\n  centuries: string[];\n  sortField: SortField;\n  sortOrder: string;\n};\n\nexport const filterPeople = (\n  people: Person[],\n  params: FilterSortParams,\n): Person[] => {\n  let filteredPeople = people;\n\n  if (params.sex) {\n    filteredPeople = filteredPeople.filter(person => person.sex === params.sex);\n  }\n\n  if (params.query) {\n    const normalizeQuery = params.query.toLowerCase();\n\n    filteredPeople = filteredPeople\n      .filter(({ name, motherName, fatherName }) => {\n        const byName = name.toLowerCase().includes(normalizeQuery);\n        const byMotherName = motherName?.toLowerCase().includes(normalizeQuery);\n        const byFatherName = fatherName?.toLowerCase().includes(normalizeQuery);\n\n        return byName || byMotherName || byFatherName;\n      });\n  }\n\n  if (params.centuries.length > 0) {\n    filteredPeople = filteredPeople.filter(person => {\n      const century = Math.ceil(person.born / 100).toString();\n\n      return params.centuries.includes(century);\n    });\n  }\n\n  if (params.sortField) {\n    const order = params.sortOrder ? -1 : 1;\n\n    filteredPeople = [...filteredPeople].sort((p1, p2) => {\n      switch (params.sortField) {\n        case SortField.BORN:\n        case SortField.DIED:\n          return (p1[params.sortField] - p2[params.sortField]) * order;\n        case SortField.NAME:\n        case SortField.SEX:\n          return p1[params.sortField]\n            .localeCompare(p2[params.sortField]) * order;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return filteredPeople;\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => (\n  classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  }));\n\nexport const Navbar = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <NavLink className={getLinkClass} to=\"/\">\n          Home\n        </NavLink>\n\n        <NavLink className={getLinkClass} to=\"/people\">\n          People\n        </NavLink>\n      </div>\n    </div>\n  </nav>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"/\" element={<HomePage />} />\n\n          <Route path=\"/people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}